import "ecc/babyjubjubParams" as context
import "ecc/proofOfOwnership" as proofOfOwnership
from "ecc/babyjubjubParams" import BabyJubJubParams
import "hashes/sha256/512bitPadded" as sha256

def multiplex(bool selector, u32[8] left, u32[8] right) -> (u32[8]):
	return if selector then right else left fi

// Merkle-Tree inclusion proof for tree depth 3
def main(field[2] publicKeyA, private field secretKeyA, u32[8] rootDigest, private u32[8] leafDigest, u32[8] PathDigest0, private u32[8] PathDigest1, private bool directionSelector0, private bool directionSelector1) -> bool :

	//Setup
	u32[8] currentDigest = leafDigest
	field counter = 1
	bool currentDirection = false
	
	//Loop up the tree
	currentDirection = directionSelector0
	u32[8] lhs = multiplex(currentDirection, currentDigest, PathDigest0)
	u32[8] rhs = multiplex(!currentDirection, currentDigest, PathDigest0)
	currentDigest = sha256(lhs, rhs)
	counter = counter + 1

	currentDirection = directionSelector1
	lhs = multiplex(currentDirection, currentDigest, PathDigest1)
	rhs = multiplex(!currentDirection, currentDigest, PathDigest1)
	currentDigest = sha256(lhs, rhs)
	counter = counter + 1

	bool proofCounter = counter == 3 
	bool proofDigest = rootDigest == currentDigest


	BabyJubJubParams context = context()
	bool proofAkeypair = proofOfOwnership(publicKeyA, secretKeyA, context)

	return  proofAkeypair && proofCounter && proofDigest
